finalData = rbind(finalData, loopFileData)
}
head(finalData)
summary(finalData)
finalData[1:5, ]
finalData[104076:104080, ]
length(finalData)
# clean up the data
names(finalData) <- tolower(names(finalData))
names(finalData)
class(finalData$neighborhood)
class(finalData$block)
class(finalData$land.square.feet)
class(finalData$gross.square.feet)
class(finalData$sale.price)
class(finalData$sale.date)
class(finalData$zip.code)
class(finalData$address)
class(finalData$address)
class(finalData$tax.class.at.time.of.sale)
finalData$sale.price.n <- as.numeric(gsub("[^[:digit:]]","",
finalData$sale.price))
finalData$gross.sqft <- as.numeric(gsub("[^[:digit:]]","",
finalData$gross.square.feet))
finalData$land.sqft <- as.numeric(gsub("[^[:digit:]]","",
finalData$land.square.feet))
finalData$tax.class.at.time.of.sale <- as.numeric(gsub("[^[:digit:]]","",
finalData$tax.class.at.time.of.sale))
finalData$sale.date <- as.Date(finalData$sale.date)
finalData$year.built <- as.numeric(as.character(finalData$year.built))
finalData$address <- as.character(finalData$address)
finalData$block <- as.numeric(as.character(finalData$block))
finalData$lot <- as.numeric(as.character(finalData$lot))
finalData$zip.code <- as.numeric(as.character(finalData$zip.code))
class(finalData$sale.price.n)
class(finalData$gross.sqft)
class(finalData$land.sqft)
finalData$apt_class <- cut(finalData$sale.price.n, breaks=c(-Inf, 0, 100000, 1000000, 5000000, Inf), labels=c("Zero", "Cheap", "Mid", "Costly", "Expensive"))
levels(finalData$apt_class)
table(finalData$apt_class)
barplot(table(finalData$apt_class), main="No. of Apartments vs Apartment Sale Class", xlab="Apartment Sale Class", ylab="No. of Apartments", col=rainbow(5), ylim=c(0,50000), las=1)
finalData$a <- finalData$sale.price.n
finalData$aa <- finalData$neighborhood
aaa <- sqldf("SELECT a AS A, aa AS B FROM finalData ORDER BY A DESC LIMIT 10")
class(jjj)
aaa$A <- aaa$A/1000000
barplot(aaa$A, main = "Top 10 Sales by Neighborhood", xlab="Neighborhoods", ylab="Top 10 Sale Prices(in million$)",ylim=c(0,1500), las=2, col=rainbow(10), beside=TRUE, legend = c(aaa$B), args.legend = list(title = "SES", x = "topright", cex = .5))
finalData$b <- finalData$sale.price.n
finalData$bb <- finalData$neighborhood
bbb <- sqldf("SELECT sum(b) AS A, bb AS B FROM finalData GROUP BY B ORDER BY A DESC LIMIT 10")
class(bbb)
bbb$A <- bbb$A/1000000
barplot(bbb$A, main = "Top 10 Cumulative Sales by Neighborhood", xlab="Neighborhoods", ylab="Top 10 CumulativeSale Prices(in million$)",ylim=c(0,8000), las=2, col=rainbow(10), beside=TRUE, legend = c(bbb$B), args.legend = list(title = "SES", x = "topright", cex = .5))
finalData$c <- finalData$sale.price.n
finalData$cc <- finalData$zip.code
ccc <- sqldf("SELECT c AS A, cc AS B FROM finalData ORDER BY A DESC LIMIT 10")
class(ccc)
ccc$A <- ccc$A/1000000
barplot(ccc$A, main = "Top 10 Sales by Zipcode", xlab="Zipcode", ylab="Top 10 Sale Prices(in million$)",ylim=c(0,1500), las=2, col=rainbow(10), beside=TRUE, legend = c(ccc$B), args.legend = list(title = "SES", x = "topright", cex = .5))
finalData$d <- finalData$sale.price.n
finalData$dd <- finalData$zip.code
ddd <- sqldf("SELECT sum(d) AS A, dd AS B FROM finalData GROUP BY B ORDER BY A DESC LIMIT 10")
ddd
finalData$d <- finalData$sale.price.n
finalData$dd <- finalData$zip.code
ddd <- sqldf("SELECT sum(d) AS A, dd AS B FROM finalData GROUP BY B ORDER BY A DESC LIMIT 10")
ddd
ddd <- sqldf("SELECT sum(d) AS A, dd AS B FROM finalData GROUP BY B ORDER BY A")
ddd
ddd[1:5, ]
finalData$e <- finalData$sale.price.n
finalData$ee <- finalData$building.class.category
eee <- sqldf("SELECT sum(e) AS A, ee AS B FROM finalData GROUP BY B ORDER BY A DESC LIMIT 10")
class(eee)
eee
eee$A <- eee$A/1000000
barplot(eee$A, main = "Top 10 Cumulative Sales by Zipcode", xlab="Zipcode", ylab="Top 10 CumulativeSale Prices(in million$)",ylim=c(0,8000), las=2, col=rainbow(10), beside=TRUE, legend = c(eee$B), args.legend = list(title = "SES", x = "topright", cex = .5))
finalData$e <- finalData$sale.price.n
finalData$ee <- finalData$building.class.category
eee <- sqldf("SELECT * FROM (SELECT sum(e) AS A, ee AS B FROM finalData GROUP BY B) ORDER BY A DESC LIMIT 10")
class(eee)
eee$A <- eee$A/1000000
eee
finalData$e <- finalData$sale.price.n
finalData$ee <- finalData$building.class.category
eee <- sqldf("SELECT sum(e) AS A, ee AS B FROM finalData GROUP BY B DESC LIMIT 10")
class(eee)
eee$A <- eee$A/1000000
finalData$e <- finalData$sale.price.n
finalData$ee <- finalData$building.class.category
eee <- sqldf("SELECT sum(e) AS A, ee AS B FROM finalData GROUP BY B")
class(eee)
eee$A <- eee$A/1000000
eee[1:5, ]
finalData$e <- finalData$sale.price.n
finalData$ee <- finalData$building.class.category
eee <- sqldf("SELECT e AS A, ee AS B FROM finalData GROUP BY B")
class(eee)
eee$A <- eee$A/1000000
eee[1:5, ]
finalData$e <- finalData$sale.price.n
finalData$ee <- finalData$building.class.category
eee <- sqldf("SELECT sum(e) AS A, ee AS B FROM finalData GROUP BY B ORDER BY A DESC LIMIT 10")
class(eee)
eee$A <- eee$A/1000000
eee
rm(list=ls())
require(gdata)
require(data.table)
bk <- read.xls("D:/DIC/dds_datasets/rollingsales_brooklyn.xls",pattern="BOROUGH", perl = "C:\\Perl64\\bin\\perl.exe")
head(bk)
summary(bk)
names(bk) <- tolower(names(bk))
names(bk)
bk$sale.price.n <- as.numeric(gsub("[^[:digit:]]","",
bk$sale.price))
bk$gross.sqft <- as.numeric(gsub("[^[:digit:]]","",
bk$gross.square.feet))
bk$land.sqft <- as.numeric(gsub("[^[:digit:]]","",
bk$land.square.feet))
bk$tax.class.at.time.of.sale <- as.numeric(gsub("[^[:digit:]]","",
bk$tax.class.at.time.of.sale))
bk$sale.date <- as.Date(bk$sale.date)
bk$year.built <- as.numeric(as.character(bk$year.built))
bk$address <- as.character(bk$address)
bk$block <- as.numeric(as.character(bk$block))
bk$lot <- as.numeric(as.character(bk$lot))
bk$zip.code <- as.numeric(as.character(bk$zip.code))
class(bk$sale.price.n)
class(bk$gross.sqft)
class(bk$land.sqft)
attach(bk)
hist(sale.price.n)
hist(sale.price.n[sale.price.n>0])
hist(gross.sqft[sale.price.n==0])
detach(bk)
bk.sale <- bk[bk$sale.price.n!=0,]
plot(bk.sale$gross.sqft,bk.sale$sale.price.n)
plot(log(bk.sale$gross.sqft),log(bk.sale$sale.price.n))
bk.homes <- bk.sale[which(grepl("FAMILY",
bk.sale$building.class.category)),]
plot(log(bk.homes$gross.sqft),log(bk.homes$sale.price.n))
bk.homes[which(bk.homes$sale.price.n<100000),]
order(bk.homes[which(bk.homes$sale.price.n<100000),]$sale.price.n)
bk.homes$outliers <- (log(bk.homes$sale.price.n) <=5) + 0
bk.homes <- bk.homes[which(bk.homes$outliers==0),]
plot(log(bk.homes$gross.sqft),log(bk.homes$sale.price.n))
bk$apt_class <- cut(bk$sale.price.n, breaks=c(-Inf, 0, 100000, 1000000, 5000000, Inf), labels=c("Zero", "Cheap", "Mid", "Costly", "Expensive"))
levels(bk$apt_class)
table(bk$apt_class)
barplot(table(bk$apt_class), main="No. of Apartments vs Apartment Sale Class", xlab="Apartment Sale Class", ylab="No. of Apartments", col=rainbow(5), ylim=c(0,50000), las=1)
bk$apt_class <- cut(bk$sale.price.n, breaks=c(-Inf, 0, 100000, 1000000, 5000000, Inf), labels=c("Zero", "Cheap", "Mid", "Costly", "Expensive"))
levels(bk$apt_class)
table(bk$apt_class)
barplot(table(bk$apt_class), main="No. of Apartments vs Apartment Sale Class", xlab="Apartment Sale Class", ylab="No. of Apartments", col=rainbow(5), ylim=c(0,12000), las=1)
bk$a <- bk$sale.price.n
bk$aa <- bk$neighborhood
aaa <- sqldf("SELECT a AS A, aa AS B FROM bk ORDER BY A DESC LIMIT 10")
class(jjj)
aaa$A <- aaa$A/1000000
barplot(aaa$A, main = "Top 10 Sales by Neighborhood", xlab="Neighborhoods", ylab="Top 10 Sale Prices(in million$)",ylim=c(0,1500), las=2, col=rainbow(10), beside=TRUE, legend = c(aaa$B), args.legend = list(title = "SES", x = "topright", cex = .5))
aaa
bk$a <- bk$sale.price.n
bk$aa <- bk$neighborhood
aaa <- sqldf("SELECT a AS A, aa AS B FROM bk ORDER BY A DESC LIMIT 10")
class(jjj)
aaa$A <- aaa$A/1000000
barplot(aaa$A, main = "Top 10 Sales by Neighborhood", xlab="Neighborhoods", ylab="Top 10 Sale Prices(in million$)",ylim=c(0,300), las=2, col=rainbow(10), beside=TRUE, legend = c(aaa$B), args.legend = list(title = "SES", x = "topright", cex = .5))
bk$b <- bk$sale.price.n
bk$bb <- bk$neighborhood
bbb <- sqldf("SELECT sum(b) AS A, bb AS B FROM bk GROUP BY B ORDER BY A DESC LIMIT 10")
class(bbb)
bbb$A <- bbb$A/1000000
barplot(bbb$A, main = "Top 10 Cumulative Sales by Neighborhood", xlab="Neighborhoods", ylab="Top 10 CumulativeSale Prices(in million$)",ylim=c(0,8000), las=2, col=rainbow(10), beside=TRUE, legend = c(bbb$B), args.legend = list(title = "SES", x = "topright", cex = .5))
bbb
bk$c <- bk$sale.price.n
bk$cc <- bk$zip.code
ccc <- sqldf("SELECT c AS A, cc AS B FROM bk ORDER BY A DESC LIMIT 10")
class(ccc)
ccc$A <- ccc$A/1000000
barplot(ccc$A, main = "Top 10 Sales by Zipcode", xlab="Zipcode", ylab="Top 10 Sale Prices(in million$)",ylim=c(0,1500), las=2, col=rainbow(10), beside=TRUE, legend = c(ccc$B), args.legend = list(title = "SES", x = "topright", cex = .5))
ccc
bk$c <- bk$sale.price.n
bk$cc <- bk$zip.code
ccc <- sqldf("SELECT c AS A, cc AS B FROM bk ORDER BY A DESC LIMIT 10")
class(ccc)
ccc$A <- ccc$A/1000000
barplot(ccc$A, main = "Top 10 Sales by Zipcode", xlab="Zipcode", ylab="Top 10 Sale Prices(in million$)",ylim=c(0,300), las=2, col=rainbow(10), beside=TRUE, legend = c(ccc$B), args.legend = list(title = "SES", x = "topright", cex = .5))
bk$d <- bk$sale.price.n
bk$dd <- bk$zip.code
ddd <- sqldf("SELECT sum(d) AS A, dd AS B FROM bk GROUP BY B ORDER BY A DESC LIMIT 10")
class(ddd)
ddd$A <- ddd$A/1000000
barplot(ddd$A, main = "Top 10 Cumulative Sales by Zipcode", xlab="Zipcode", ylab="Top 10 CumulativeSale Prices(in million$)",ylim=c(0,8000), las=2, col=rainbow(10), beside=TRUE, legend = c(ddd$B), args.legend = list(title = "SES", x = "topright", cex = .5))
bk$e <- bk$sale.price.n
bk$ee <- bk$building.class.category
eee <- sqldf("SELECT sum(e) AS A, ee AS B FROM bk GROUP BY B ORDER BY A DESC LIMIT 10")
class(eee)
eee$A <- eee$A/1000000
barplot(eee$A, main = "Top 10 Cumulative Sales by Zipcode", xlab="Zipcode", ylab="Top 10 CumulativeSale Prices(in million$)",ylim=c(0,8000), las=2, col=rainbow(10), beside=TRUE, legend = c(eee$B), args.legend = list(title = "SES", x = "topright", cex = .5))
bk$e <- bk$sale.price.n
bk$ee <- bk$building.class.category
eee <- sqldf("SELECT sum(e) AS A, ee AS B FROM bk GROUP BY B ORDER BY A DESC LIMIT 10")
eee
bk$d <- bk$sale.price.n
bk$dd <- bk$zip.code
ddd <- sqldf("SELECT sum(d) AS A, dd AS B FROM bk GROUP BY B ORDER BY A DESC LIMIT 10")
ddd
eee <- sqldf("SELECT f.sale.price.n AS A, f.neighborhood AS B FROM finalData f GROUP BY B ORDER BY A DESC LIMIT 10")
finalData$e <- finalData$sale.price.n
finalData$ee <- finalData$building.class.category
eee <- sqldf("SELECT max(e) AS A, ee AS B FROM finalData GROUP BY B DESC LIMIT 10")
finalData$e <- finalData$sale.price.n
finalData$ee <- finalData$building.class.category
eee <- sqldf("SELECT max(e) AS A, ee AS B FROM finalData GROUP BY B ORDER BY A DESC LIMIT 10")
class(eee)
eee
finalData$e <- finalData$sale.price.n
finalData$ee <- finalData$building.class.category
eee <- sqldf("SELECT count(e) AS A, ee AS B FROM finalData GROUP BY B ORDER BY A DESC LIMIT 10")
class(eee)
finalData$e <- finalData$sale.price.n
finalData$ee <- finalData$building.class.category
eee <- sqldf("SELECT count(ee) AS A, ee AS B FROM finalData GROUP BY B ORDER BY A DESC LIMIT 10")
class(eee)
eee <- sqldf("SELECT count(ee) AS A, ee AS B FROM finalData GROUP BY B ORDER BY A DESC LIMIT 10")
r()list=ls()
rm(list=ls())
require(gdata)
require(data.table)
require(sqldf)
fileDir <- 'D:/dic_data/problem3/'
fileDir1 <- 'D:/dic_data/problem3/rollingsales_brooklyn.xls'
files <- list.files(path = fileDir, pattern = "\\.xls$")
finalData <- read.xls(fileDir1,pattern="BOROUGH", perl = "C:\\Perl64\\bin\\perl.exe")
for(i in 2:5){
tempDir = paste(fileDir,files[i],sep = "")
loopFileData <- read.xls(tempDir,pattern="BOROUGH", perl = "C:\\Perl64\\bin\\perl.exe")
finalData = rbind(finalData, loopFileData)
}
head(finalData)
summary(finalData)
finalData[1:5, ]
finalData[104076:104080, ]
length(finalData)
# clean up the data
names(finalData) <- tolower(names(finalData))
names(finalData)
class(finalData$neighborhood)
class(finalData$block)
class(finalData$land.square.feet)
class(finalData$gross.square.feet)
class(finalData$sale.price)
class(finalData$sale.date)
class(finalData$zip.code)
class(finalData$address)
class(finalData$address)
class(finalData$tax.class.at.time.of.sale)
finalData$sale.price.n <- as.numeric(gsub("[^[:digit:]]","",
finalData$sale.price))
finalData$gross.sqft <- as.numeric(gsub("[^[:digit:]]","",
finalData$gross.square.feet))
finalData$land.sqft <- as.numeric(gsub("[^[:digit:]]","",
finalData$land.square.feet))
finalData$tax.class.at.time.of.sale <- as.numeric(gsub("[^[:digit:]]","",
finalData$tax.class.at.time.of.sale))
finalData$sale.date <- as.Date(finalData$sale.date)
finalData$year.built <- as.numeric(as.character(finalData$year.built))
finalData$address <- as.character(finalData$address)
finalData$block <- as.numeric(as.character(finalData$block))
finalData$lot <- as.numeric(as.character(finalData$lot))
finalData$zip.code <- as.numeric(as.character(finalData$zip.code))
class(finalData$sale.price.n)
class(finalData$gross.sqft)
class(finalData$land.sqft)
## do a bit of exploration to make sure there's not anything
## weird going on with sale prices
attach(finalData)
hist(sale.price.n)
hist(sale.price.n[sale.price.n>0])
hist(gross.sqft[sale.price.n==0])
detach(finalData)
## keep only the actual sales and plot between sale price and gross sq ft
finalData.sale <- finalData[finalData$sale.price.n!=0,]
plot(finalData.sale$gross.sqft,finalData.sale$sale.price.n)
plot(log(finalData.sale$gross.sqft),log(finalData.sale$sale.price.n))
## for now, let's look at 1-, 2-, and 3-family homes
finalData.homes <- finalData.sale[which(grepl("FAMILY",
finalData.sale$building.class.category)),]
plot(log(finalData.homes$gross.sqft),log(finalData.homes$sale.price.n))
finalData.homes[which(finalData.homes$sale.price.n<100000),]
order(finalData.homes[which(finalData.homes$sale.price.n<100000),]$sale.price.n)
## remove outliers that seem like they weren't actual sales
finalData.homes$outliers <- (log(finalData.homes$sale.price.n) <=5) + 0
finalData.homes <- finalData.homes[which(finalData.homes$outliers==0),]
plot(log(finalData.homes$gross.sqft),log(finalData.homes$sale.price.n))
finalData$apt_class <- cut(finalData$sale.price.n, breaks=c(-Inf, 0, 100000, 1000000, 5000000, Inf), labels=c("Zero", "Cheap", "Mid", "Costly", "Expensive"))
levels(finalData$apt_class)
table(finalData$apt_class)
barplot(table(finalData$apt_class), main="No. of Apartments vs Apartment Sale Class", xlab="Apartment Sale Class", ylab="No. of Apartments", col=rainbow(5), ylim=c(0,50000), las=1)
finalData$a <- finalData$sale.price.n
finalData$aa <- finalData$neighborhood
aaa <- sqldf("SELECT a AS A, aa AS B FROM finalData ORDER BY A DESC LIMIT 10")
class(aaa)
aaa$A <- aaa$A/1000000
barplot(aaa$A, main = "Top 10 Sales by Neighborhood", xlab="Neighborhoods", ylab="Top 10 Sale Prices(in million$)",ylim=c(0,1500), las=2, col=rainbow(10), beside=TRUE, legend = c(aaa$B), args.legend = list(title = "SES", x = "topright", cex = .5))
finalData$b <- finalData$sale.price.n
finalData$bb <- finalData$neighborhood
bbb <- sqldf("SELECT count(b) AS A, bb AS B FROM finalData GROUP BY B ORDER BY A DESC LIMIT 10")
class(bbb)
bbb$A <- bbb$A/1000000
barplot(bbb$A, main = "Top 10 Cumulative Sales by Neighborhood", xlab="Neighborhoods", ylab="Top 10 CumulativeSale Prices(in million$)",ylim=c(0,8000), las=2, col=rainbow(10), beside=TRUE, legend = c(bbb$B), args.legend = list(title = "SES", x = "topright", cex = .5))
finalData$b <- finalData$sale.price.n
finalData$bb <- finalData$neighborhood
bbb <- sqldf("SELECT count(b) AS A, bb AS B FROM finalData GROUP BY B ORDER BY A DESC LIMIT 10")
bbb
bbb <- sqldf("SELECT count(bb) AS A, bb AS B FROM finalData GROUP BY B ORDER BY A DESC LIMIT 10")
bbb
bbb <- sqldf("SELECT count(bb) AS A, bb AS B FROM finalData GROUP BY B ORDER BY A DESC LIMIT 20")
bbb
bbb <- sqldf("SELECT sum(b) AS A, bb AS B FROM finalData GROUP BY B LIMIT 10")
bbb
finalData$apt_year_built <- cut(finalData$year.built, breaks=c(-Inf,1900,1925,1950,1975,2000,Inf), labels=c("<1900", "1900-1925", "1925-1950", "1950-1975", "1975-2000", ">2000"))
finalData$apt_year_built
finalData$apt_year_built <- cut(finalData$year.built, breaks=c(-Inf,1900,1925,1950,1975,2000,Inf), labels=c("<1900", "1900-1925", "1925-1950", "1950-1975", "1975-2000", ">2000"))
levels(finalData$apt_year_built)
table(finalData$apt_year_built)
barplot(table(finalData$apt_year_built), main="No. of Apartments Sold vs Year Built", xlab="Year Built", ylab="No. of Apartments", col=rainbow(7), ylim=c(0,50000), las=1)
table(finalData$apt_year_built)
barplot(table(finalData$apt_year_built), main="No. of Apartments Sold vs Year Built", xlab="Year Built", ylab="No. of Apartments", col=rainbow(7), ylim=c(0,50000), las=2)
barplot(table(finalData$apt_year_built), main="No. of Apartments Sold vs Year Built", ylab="No. of Apartments", col=rainbow(7), ylim=c(0,30000), las=2)
finalData$e <- finalData$sale.price.n
finalData$ee <- finalData$building.class.category
eee <- sqldf("SELECT e AS A, ee AS B FROM finalData GROUP BY B ORDER BY sum(A) DESC LIMIT 10")
eee
finalData$e <- finalData$sale.price.n
finalData$ee <- finalData$building.class.category
eee <- sqldf("SELECT ee AS A, sum(e) AS B FROM finalData GROUP BY A ORDER BY B DESC LIMIT 10")
class(eee)
eee
library(bitops)
library(rjson)
library(RCurl)
library(RJSONIO)
library(twitteR)
library(ROAuth)
library(jsonlite)
consumer_key <- "RQGcRA27gAH0IXWDiOFCMQ9kp"
consumer_secret <- "hZGnJIRsYmma2QKqxmrEfiQ3snV3zQZd3daZCJOcf93YLR3hsV"
access_token <- "2466308148-BtSYKkgxcXG812eExHJwerlReWYJRZiQSsKDrbb"
access_secret <- "nVFW4iQ42KfHPP0nm45rS5fauaGsxj7IXMiNO65lxWQdC"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
install.packages("base64enc")
library(bitops)
library(rjson)
library(RCurl)
library(RJSONIO)
library(twitteR)
library(ROAuth)
library(jsonlite)
library(base64enc)
consumer_key <- "RQGcRA27gAH0IXWDiOFCMQ9kp"
consumer_secret <- "hZGnJIRsYmma2QKqxmrEfiQ3snV3zQZd3daZCJOcf93YLR3hsV"
access_token <- "2466308148-BtSYKkgxcXG812eExHJwerlReWYJRZiQSsKDrbb"
access_secret <- "nVFW4iQ42KfHPP0nm45rS5fauaGsxj7IXMiNO65lxWQdC"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
library("twitteR")
library("wordcloud")
library("tm")
library("ggplot2")
library("Rgraphviz")
json_data1 <- readLines('Mar1001.json', warn = FALSE)
json_df <- jsonlite::fromJSON(json_data1)
tweets_text <- json_df$text
json_data1 <- readLines('Mar1001.json', warn = FALSE)
getwd()
json_data1 <- readLines('Mar1001.json', warn = FALSE)
json_df <- jsonlite::fromJSON(json_data1)
tweets_text <- json_df$text
rent_tweets_text <- iconv(tweets_text, 'UTF-8', 'ASCII')
rent_clean_text <- Corpus(VectorSource(rent_tweets_text))
rent_clean_text <- tm_map(rent_clean_text, content_transformer(function (x , pattern ) gsub(pattern, " ", x)), "/")
rent_clean_text <- tm_map(rent_clean_text, content_transformer(function (x , pattern ) gsub(pattern, " ", x)), "@")
rent_clean_text <- tm_map(rent_clean_text, content_transformer(function (x , pattern ) gsub(pattern, " ", x)), "\\|")
rent_clean_text <- tm_map(rent_clean_text, removePunctuation)
rent_clean_text <- tm_map(rent_clean_text, content_transformer(tolower))
rent_clean_text <- tm_map(rent_clean_text, removeWords, stopwords("english"))
rent_clean_text <- tm_map(rent_clean_text, stripWhitespace)
rent_clean_text <- tm_map(rent_clean_text, removeWords, c("http","https", "tco"))
tdm <- TermDocumentMatrix(rent_clean_text)
tmatrix <- as.matrix(tdm)
term_freqs <- sort(rowSums(tmatrix),decreasing=TRUE)
term_freqs <- subset(term_freqs, term_freqs >= 50)
termfreq_df <- data.frame(term = names(term_freqs),freq=term_freqs)
termfreq_df[1:10, ]
ggplot(termfreq_df, aes(x = term, y = freq)) + geom_bar(stat = "identity") + xlab("Terms") + ylab("Frequency") + coord_flip()
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
ggplot(termfreq_df, aes(x = term, y = freq)) + geom_bar(stat = "identity") + xlab("Terms") + ylab("Frequency") + coord_flip()
term_freqs <- subset(term_freqs, term_freqs >= 100)
termfreq_df <- data.frame(term = names(term_freqs),freq=term_freqs)
termfreq_df[1:10, ]
ggplot(termfreq_df, aes(x = term, y = freq)) + geom_bar(stat = "identity") + xlab("Terms") + ylab("Frequency") + coord_flip()
set.seed(1234)
wordcloud(words = termfreq_df$term, freq = termfreq_df$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
findAssocs(tdm, "rent", 0.2)
frequent_terms <- findFreqTerms(tdm, lowfreq = 25)
print(frequent_terms)
tdm2 <- removeSparseTerms(tdm, sparse = 0.95)
tmatrix2 <- as.matrix(tdm2)
distMatrix <- dist(scale(tmatrix2))
fit <- hclust(distMatrix, method = "ward.D2")
plot(fit)
rect.hclust(fit, k=6)
rm(list=ls())
library("twitteR")
library("wordcloud")
library("tm")
library("ggplot2")
library("Rgraphviz")
json_data1 <- readLines('Mar1001.json', warn = FALSE)
json_df <- jsonlite::fromJSON(json_data1)
tweets_text <- json_df$text
rent_tweets_text <- iconv(tweets_text, 'UTF-8', 'ASCII')
rent_clean_text <- Corpus(VectorSource(rent_tweets_text))
rent_clean_text <- tm_map(rent_clean_text, content_transformer(function (x , pattern ) gsub(pattern, " ", x)), "/")
rent_clean_text <- tm_map(rent_clean_text, content_transformer(function (x , pattern ) gsub(pattern, " ", x)), "@")
rent_clean_text <- tm_map(rent_clean_text, content_transformer(function (x , pattern ) gsub(pattern, " ", x)), "\\|")
rent_clean_text <- tm_map(rent_clean_text, removePunctuation)
rent_clean_text <- tm_map(rent_clean_text, content_transformer(tolower))
rent_clean_text <- tm_map(rent_clean_text, removeWords, stopwords("english"))
rent_clean_text <- tm_map(rent_clean_text, stripWhitespace)
rent_clean_text <- tm_map(rent_clean_text, removeWords, c("http","https", "tco"))
tdm <- TermDocumentMatrix(rent_clean_text)
tmatrix <- as.matrix(tdm)
term_freqs <- sort(rowSums(tmatrix),decreasing=TRUE)
term_freqs <- subset(term_freqs, term_freqs >= 100)
termfreq_df <- data.frame(term = names(term_freqs),freq=term_freqs)
termfreq_df[1:10, ]
ggplot(termfreq_df, aes(x = term, y = freq)) + geom_bar(stat = "identity") + xlab("Terms") + ylab("Frequency") + coord_flip()
set.seed(1234)
wordcloud(words = termfreq_df$term, freq = termfreq_df$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
findAssocs(tdm, "rent", 0.2)
frequent_terms <- findFreqTerms(tdm, lowfreq = 25)
print(frequent_terms)
tdm2 <- removeSparseTerms(tdm, sparse = 0.95)
tmatrix2 <- as.matrix(tdm2)
#cluster terms
distMatrix <- dist(scale(tmatrix2))
fit <- hclust(distMatrix, method = "ward.D2")
plot(fit)
rect.hclust(fit, k=6) #cut tree into 6 clusters
tdm2 <- removeSparseTerms(tdm, sparse = 0.95)
tmatrix2 <- as.matrix(tdm2)
#cluster terms
distMatrix <- dist(scale(tmatrix2))
fit <- hclust(distMatrix, method = "ward.D2")
plot(fit)
rm(list=ls())
library(bitops)
library(rjson)
library(RCurl)
library(RJSONIO)
library(twitteR)
library(ROAuth)
library(jsonlite)
consumer_key <- "RQGcRA27gAH0IXWDiOFCMQ9kp"
consumer_secret <- "hZGnJIRsYmma2QKqxmrEfiQ3snV3zQZd3daZCJOcf93YLR3hsV"
access_token <- "2466308148-BtSYKkgxcXG812eExHJwerlReWYJRZiQSsKDrbb"
access_secret <- "nVFW4iQ42KfHPP0nm45rS5fauaGsxj7IXMiNO65lxWQdC"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
json_data <- rjson::fromJSON(file="sampleTweets1.json")
json_data_df <- do.call("rbind", lapply(json_data, as.data.frame))
json_data_df <- do.call("rbind", lapply(json_data, as.data.frame))
library(bitops)
library(rjson)
library(RCurl)
library(RJSONIO)
library(twitteR)
library(ROAuth)
library(jsonlite)
consumer_key <- "RQGcRA27gAH0IXWDiOFCMQ9kp"
consumer_secret <- "hZGnJIRsYmma2QKqxmrEfiQ3snV3zQZd3daZCJOcf93YLR3hsV"
access_token <- "2466308148-BtSYKkgxcXG812eExHJwerlReWYJRZiQSsKDrbb"
access_secret <- "nVFW4iQ42KfHPP0nm45rS5fauaGsxj7IXMiNO65lxWQdC"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
shiny::runApp('D:/DIC/proj1_deliverables/Problem5/submit')
runApp('D:/DIC/proj1_deliverables/Problem5/submit')
shiny::runApp('D:/DIC/proj1_deliverables/Problem5/submit')
library(streamR)
library(RCurl)
library(RJSONIO)
library(stringr)
library(ROAuth)
library(bitops)
library(shiny)
library(twitteR)
library(plyr)
library(sqldf)
library(bitops)
library(streamR)
runApp('D:/DIC/proj1_deliverables/Problem5/submit')
runApp('D:/DIC/proj1_deliverables/Problem5/submit')
getwd()
runApp('D:/DIC/proj1_deliverables/Problem5/submit')
runApp('D:/DIC/proj1_deliverables/Problem5/submit')
